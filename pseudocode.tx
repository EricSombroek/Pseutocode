Module: statements*=RootStatement;
RootStatement: Statement;
Statement: (IfStatement | WhileStatement | PrintStatement | BreakStatement | ContinueStatement | AssignmentStatement);
PrintStatement: ('print' | 'display' | 'show') arg=Expression;
AssignmentStatement: target=Name ('=' | 'equals') value=Expression;
IfStatement: 'if' test=Expression ('then:' | 'then :' | 'then' | ':') body*=Statement orelse*=OrElse 'end';
OrElse: (ElseIfStatement | ElseStatement);
ElseStatement: 'else' body*=Statement &'end';
ElseIfStatement: 'else if' test=Expression ('then:' | 'then :' | 'then' | ':') body*=Statement &('end' | 'else');
WhileStatement: 'while' test=Expression ('do' | 'do :' | ':') body*=Statement orelse*=OrElse 'end';
BreakStatement: _='break';
ContinueStatement: _='continue';

Expression: logical_terms=LogicalTerm (operators=OrOperator logical_terms=LogicalTerm)* ;
OrOperator: '||' | 'or' ;

LogicalTerm: logical_factors=LogicalFactor (operators=AndOperator logical_factors=LogicalFactor)* ;
AndOperator: '&&' | 'and' ;

LogicalFactor: (sign=BooleanUnaryOpeator)? (operand=BooleanEntity | '(' operand=Expression ')');
BooleanUnaryOpeator: '!' | 'not' ;

BooleanEntity: left=ArithmeticExpression (operator=ComparisonOperator (right=ArithmeticExpression | '(' right=Expression ')'))?;
ComparisonOperator: EqualOperator | NotEqualOperator | GreaterOperator | GreaterOrEqualOperator | LowerOperator | LowerOrEqualOperator ;
EqualOperator: '==' | 'is equal to' ;
NotEqualOperator: '!=' | 'is not equal to' | 'is different from';
GreaterOperator: '>' | 'is greater than' ;
GreaterOrEqualOperator: '>=' | 'is greater or equal to';
LowerOperator: '<' | 'is lower than' ;
LowerOrEqualOperator: '<=' | 'is lower or equal to';

ArithmeticExpression: terms=Term (operators=TermOperator terms=Term)*;
TermOperator: '+' | '-' | 'plus' | 'minus';

Term: factors=Factor (operators=FactorOperator factors=Factor)*;
FactorOperator: '*' | 'times' | '/' | 'divided by' | '%' | 'modulo';

Factor: (sign=UnaryOperator)? base=ExponentiationBase (operators=ExponentOperator exponents=ExponentiationExponent)* ;
ExponentOperator: '**' | 'power' | 'to the power of' ;

ExponentiationBase: operand=Value | '(' operand=Expression ')' ;
ExponentiationExponent: (sign=UnaryOperator)? (operand=Factor | '(' operand=Expression ')') ;

UnaryOperator:  '+' | 'plus' | '-' | 'minus';

Value: (Num | BooleanConstant | Name | Str);
Num: n=NUMBER;
Name: id=ID;
Str: s=STRING;
BooleanConstant: boolean_value=BooleanConstantValue;
BooleanConstantValue: "true" | "false";

